{"version":3,"sources":["ajax.js","Image.js","Gallery.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["ajax","method","url","header","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","this","status","response","getResponseHeader","statusText","onerror","send","Image","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loaded","setState","loading","state","cat","props","view","push","react_default","a","createElement","key","id","className","src","alt","onLoad","Component","Gallery","src_Image","cats","map","renderImage","Search","setCategories","jsonString","categories","JSON","parse","_unused","console","log","setCats","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","maxCats","parseInt","t0","stop","_x","apply","arguments","searchCats","_callee2","category","searchURL","_context2","document","getElementById","selectedOptions","value","currentCategory","page","currentLimit","limit","catURL","replace","then","catch","setLimit","event","target","setPage","innerText","categoriesURL","name","pages","length","onClick","factor","startPage","i","renderOption","onChange","src_Gallery","renderPageButtons","App","src_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRA6BeA,MA7Bf,SAAcC,EAAQC,EAAKC,GAEvB,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAKR,EAAQC,GACjBK,EAAIG,OAAS,WACLC,KAAKC,QAAU,KAAOD,KAAKC,OAAS,IAEhCP,EADU,MAAVF,EACQ,CAACI,EAAIM,SAAWN,EAAIO,kBAAkB,qBAEtCP,EAAIM,UAGhBP,EAAO,CACHM,OAAQD,KAAKC,OACbG,WAAYR,EAAIQ,cAI5BR,EAAIS,QAAU,WACVV,EAAO,CACHM,OAAQD,KAAKC,OACbG,WAAYR,EAAIQ,cAGxBR,EAAIU,UCGGC,cAxBX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,QAOJc,OAAS,WACLN,EAAKO,SAAS,CAAEC,SAAS,KAPzBR,EAAKS,MAAQ,CACTD,SAAS,GAHHR,wEAcV,IAAIU,EAAMlB,KAAKmB,MAAMD,IACjBE,EAAO,GAKX,OAJIpB,KAAKiB,MAAMD,SACXI,EAAKC,KAAKC,EAAAC,EAAAC,cAAA,QAAMC,IAAK,QAAUP,EAAIQ,GAAIC,UAAU,iCAErDP,EAAKC,KAAKC,EAAAC,EAAAC,cAAA,OAAKC,IAAKP,EAAIQ,GAAIE,IAAKV,EAAI3B,IAAKsC,IAAKX,EAAIQ,GAAII,OAAQ9B,KAAKc,UAC7DM,SAtBKW,aCsBLC,sLAlBCd,GACR,OACII,EAAAC,EAAAC,cAAA,OAAKC,IAAKP,EAAIQ,GAAIC,UAAU,uEACxBL,EAAAC,EAAAC,cAACS,EAAD,CAAOf,IAAKA,sCAOpB,OACII,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mDACV3B,KAAKmB,MAAMe,KAAKC,IAAInC,KAAKoC,qBAfpBL,aCChBM,cAEJ,SAAAA,IAAc,IAAA7B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAqC,IACZ7B,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAA4B,GAAAxB,KAAAb,QAgBFsC,cAAgB,SAACC,GACf,IACE/B,EAAKO,SAAS,CAAEyB,WAAYC,KAAKC,MAAMH,GAAavB,SAAS,IAC7D,MAAA2B,GACAC,QAAQC,IAAI,uBArBFrC,EA0BdsC,QA1Bc,eAAAC,EAAAtC,OAAAuC,EAAA,EAAAvC,CAAAwC,EAAA1B,EAAA2B,KA0BJ,SAAAC,EAAOjD,GAAP,OAAA+C,EAAA1B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,EAEF9C,EAAKS,MAAMuC,UAAYtD,EAAS,GAF9B,CAAAmD,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAGE/C,EAAKO,SAAS,CAAEyC,QAASC,SAASvD,EAAS,MAH7C,OAKNM,EAAKO,SAAS,CAAEmB,KAAMO,KAAKC,MAAMxC,EAAS,MALpCmD,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAONT,QAAQC,IAAI,qBAPN,yBAAAQ,EAAAM,SAAAR,EAAAnD,KAAA,YA1BI,gBAAA4D,GAAA,OAAAb,EAAAc,MAAA7D,KAAA8D,YAAA,GAAAtD,EAsCduD,WAtCctD,OAAAuC,EAAA,EAAAvC,CAAAwC,EAAA1B,EAAA2B,KAsCD,SAAAc,IAAA,IAAAC,EAAAC,EAAA,OAAAjB,EAAA1B,EAAA6B,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,UACPU,EAAWG,SAASC,eAAe,cAAcC,gBAAgB,GAAGC,MAEpE/D,EAAKS,MAAMuD,kBAAoBP,EAHxB,CAAAE,EAAAZ,KAAA,eAAAY,EAAAZ,KAAA,EAIH/C,EAAKO,SAAS,CAAEyD,gBAAiBP,EAAUQ,KAAM,IAJ9C,UAOPjE,EAAKS,MAAMyD,eAAiBlE,EAAKS,MAAM0D,MAPhC,CAAAR,EAAAZ,KAAA,eAAAY,EAAAZ,KAAA,EAQH/C,EAAKO,SAAS,CAAE2D,aAAclE,EAAKS,MAAM0D,MAAOF,KAAM,IARnD,OAWPP,EAAYU,EAAOC,QAAQ,UAAWrE,EAAKS,MAAM0D,OAAOE,QAAQ,SAAUrE,EAAKS,MAAMwD,MAAMI,QAAQ,aAAcZ,GACrH5E,EAAK,MAAO6E,GAAW,GAAMY,KAAKtE,EAAKsC,SAASiC,MAAM,kBAAMnC,QAAQC,IAAI,uBAZ7D,wBAAAsB,EAAAR,SAAAK,EAAAhE,SAtCCQ,EA6DdwE,SAAW,SAACC,GACVzE,EAAKO,SAAS,CAAE4D,MAAOM,EAAMC,OAAOZ,gBAAgB,GAAGC,SA9D3C/D,EAkEd2E,QAAU,SAACF,GACT,IAAIR,EAAOjE,EAAKS,MAAMwD,KACE,SAApBQ,EAAMC,OAAOxD,GACf+C,IAEAA,EAD6B,SAApBQ,EAAMC,OAAOxD,GACf+C,EAAO,EAAIA,EAAO,EAAIA,EAEtBhB,SAASwB,EAAMC,OAAOE,WAAa,EAE5C5E,EAAKO,SAAS,CAAE0D,KAAMA,GAAQjE,EAAKuD,aAzEnCvD,EAAKS,MAAQ,CACXuB,WAAY,GACZN,KAAM,GACNyC,MAAO,EACPF,KAAM,EACNC,aAAc,EACdF,gBAAiB,EACjBxD,SAAS,EACTwC,QAAS,GAGXnE,EAAK,MAAOgG,GAAeP,KAAKtE,EAAK8B,eAAeyC,MAAM,kBAAMnC,QAAQC,IAAI,6BAbhErC,4EAsDDyD,GACX,OACE3C,EAAAC,EAAAC,cAAA,UAAQC,IAAKwC,EAASvC,GAAI6C,MAAON,EAASvC,IAAKuC,EAASqB,kDAwB1D,IAAIC,EAAQ,GACZ,GAAIvF,KAAKiB,MAAMiB,KAAKsD,OAAS,GAAKxF,KAAKiB,MAAMwD,KAAO,EAAG,CAEjDzE,KAAKiB,MAAMwD,KAAO,GACpBc,EAAMlE,KAAKC,EAAAC,EAAAC,cAAA,UAAQE,GAAG,OAAOD,IAAI,OAAOgE,QAASzF,KAAKmF,QAASxD,UAAU,gBAA9D,aAIb,IAFA,IAAI+D,EAAS1F,KAAKiB,MAAMuC,QAAUxD,KAAKiB,MAAM0D,MAAQ,EAAI,EAAI3E,KAAKiB,MAAMuC,QAAUxD,KAAKiB,MAAM0D,MACzFgB,EAAY3F,KAAKiB,MAAMwD,KAAOiB,EAAS,EAAI1F,KAAKiB,MAAMwD,KAAO,EACxDmB,EAAID,EAAWC,EAAID,EAAYD,EAAQE,IAAKL,EAAMlE,KAAKC,EAAAC,EAAAC,cAAA,UAAQC,IAAKmE,EAAGH,QAASzF,KAAKmF,QAASxD,UAAW3B,KAAKiB,MAAMwD,KAAO,IAAMmB,EAAI,kBAAoB,gBAAiBA,IAE/K5F,KAAKiB,MAAMwD,KAAO,EAAIzE,KAAKiB,MAAMuC,QAAUxD,KAAKiB,MAAM0D,OACxDY,EAAMlE,KAAKC,EAAAC,EAAAC,cAAA,UAAQE,GAAG,OAAOD,IAAI,OAAOgE,QAASzF,KAAKmF,QAASxD,UAAU,gBAA9D,cAGf,OAAO4D,mCAKP,OAAIvF,KAAKiB,MAAMD,QAEXM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,QAAMC,IAAI,UAAUE,UAAU,mCAMhCL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAQE,GAAG,cACR1B,KAAKiB,MAAMuB,WAAWL,IAAInC,KAAK6F,eAElCvE,EAAAC,EAAAC,cAAA,UAAQiE,QAASzF,KAAK+D,WAAYpC,UAAU,mBAA5C,UACAL,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UAAQE,GAAG,SAASoE,SAAU9F,KAAKgF,UACjC1D,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAACuE,EAAD,CAAS7D,KAAMlC,KAAKiB,MAAMiB,OAC1BZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uCACZ3B,KAAKgG,6BA5HGjE,aAqIfsD,EAAgB,uEAChBT,EAAS,uJAEAvC,IC7HA4D,0LARX,OACE3E,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC0E,EAAD,cALUnE,cCQEoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnF,EAAAC,EAAAC,cAACkF,EAAD,MAAStC,SAASC,eAAe,SD2H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.c99af573.chunk.js","sourcesContent":["function ajax(method, url, header) {\r\n\r\n    return new Promise(function (resolve, reject) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(method, url);\r\n        xhr.onload = function () {\r\n            if (this.status >= 200 && this.status < 300) {\r\n                if (header != null) {\r\n                    resolve([xhr.response , xhr.getResponseHeader(\"Pagination-Count\")]);\r\n                } else {\r\n                    resolve(xhr.response);\r\n                }\r\n            } else {\r\n                reject({\r\n                    status: this.status,\r\n                    statusText: xhr.statusText\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            reject({\r\n                status: this.status,\r\n                statusText: xhr.statusText\r\n            });\r\n        };\r\n        xhr.send();\r\n    });\r\n}\r\n\r\nexport default ajax;","import React, { Component } from 'react'\r\n\r\nclass Image extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    //Si la imagen se ha cargado marca el estado\r\n    loaded = () => {\r\n        this.setState({ loading: false });\r\n    }\r\n\r\n    //Genera la vista de la imagen y el span si esta cargando la imagen\r\n    render() {\r\n        let cat = this.props.cat;\r\n        let view = [];\r\n        if (this.state.loading) {\r\n            view.push(<span key={\"span_\" + cat.id} className=\"spinner-border text-warning\"></span>);\r\n        }\r\n        view.push(<img key={cat.id} src={cat.url} alt={cat.id} onLoad={this.loaded} />);\r\n        return view;\r\n    }\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react'\r\nimport Image from './Image'\r\n\r\nclass Gallery extends Component {\r\n\r\n    //Genera la imagen correspondiente\r\n    renderImage(cat) {\r\n        return (\r\n            <div key={cat.id} className=\"imageContainer d-flex justify-content-around align-content-between \">\r\n                <Image cat={cat} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //Genera una galeria con cada imagen de la coleccion\r\n    render() {\r\n        return (\r\n            <div className=\"gallery d-flex justify-content-around flex-wrap\">\r\n                {this.props.cats.map(this.renderImage)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react'\r\nimport ajax from './ajax'\r\nimport Gallery from './Gallery'\r\n\r\nclass Search extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      categories: [],\r\n      cats: [],\r\n      limit: 5,\r\n      page: 0,\r\n      currentLimit: 5,\r\n      currentCategory: 0,\r\n      loading: true,\r\n      maxCats: 0\r\n    }\r\n    //Hace la peticion al servidor en busca de las categorias\r\n    ajax('GET', categoriesURL).then(this.setCategories).catch(() => console.log(\"Error : AJAX CATEGORIES\"));\r\n  }\r\n\r\n  //recibe el JSON de categorias y coloca loading a false para mostrar el buscador\r\n  setCategories = (jsonString) => {\r\n    try {\r\n      this.setState({ categories: JSON.parse(jsonString), loading: false });\r\n    } catch{\r\n      console.log(\"Error: Parse JSON\");\r\n    }\r\n  }\r\n\r\n  //recibe el JSON con los gatos de la API y genera la coleccion\r\n  setCats = async (response) => {\r\n    try {\r\n      if (this.state.maxCats !== response[1]) {\r\n        await this.setState({ maxCats: parseInt(response[1]) });\r\n      }\r\n      this.setState({ cats: JSON.parse(response[0]) });\r\n    } catch{\r\n      console.log(\"Error: Parse JSON\");\r\n    }\r\n  }\r\n\r\n  //Realiza la busqueda de la categoria y con el limite seleccionado\r\n  searchCats = async () => {\r\n    let category = document.getElementById(\"categories\").selectedOptions[0].value;\r\n    //Si la catergoria es diferente a la anterior busqueda utiliza la pagina 0\r\n    if (this.state.currentCategory !== category) {\r\n      await this.setState({ currentCategory: category, page: 0 });\r\n    }\r\n    //Si el limite es distinto al de la anterior busqueda utiliza la pagina 0\r\n    if (this.state.currentLimit !== this.state.limit) {\r\n      await this.setState({ currentLimit: this.state.limit, page: 0 });\r\n    }\r\n    //Genera la uri y realiza la peticion de imagenes\r\n    let searchURL = catURL.replace('<limit>', this.state.limit).replace('<page>', this.state.page).replace('<category>', category);\r\n    ajax('GET', searchURL, true).then(this.setCats).catch(() => console.log(\"Error : AJAX CATS\"));\r\n  }\r\n\r\n  //Genera el option de cada categoria\r\n  renderOption(category) {\r\n    return (\r\n      <option key={category.id} value={category.id}>{category.name}</option>\r\n    );\r\n  }\r\n\r\n  //Selecciona el limite nuevo de imagenes\r\n  setLimit = (event) => {\r\n    this.setState({ limit: event.target.selectedOptions[0].value });\r\n  }\r\n\r\n  //Asigna la pagina a utilizar y realiza una nueva busqueda\r\n  setPage = (event) => {\r\n    let page = this.state.page;\r\n    if (event.target.id === 'next') {\r\n      page++;\r\n    } else if (event.target.id === 'prev') {\r\n      page = page > 0 ? page - 1 : page;\r\n    } else {\r\n      page = parseInt(event.target.innerText) - 1;\r\n    }\r\n    this.setState({ page: page }, this.searchCats);\r\n  }\r\n\r\n  //Genera los botones  de las paginas, anterior y siguiente\r\n  renderPageButtons() {\r\n    let pages = [];\r\n    if (this.state.cats.length > 0 || this.state.page > 0) {\r\n      //Si es la primera pagina no muestra el boton de anterior\r\n      if (this.state.page > 0) {\r\n        pages.push(<button id=\"prev\" key=\"prev\" onClick={this.setPage} className=\"btn btn-info\">Anterior</button>);\r\n      }\r\n      let factor = this.state.maxCats / this.state.limit > 5 ? 5 : this.state.maxCats / this.state.limit ;\r\n      let startPage = this.state.page < factor ? 1 : this.state.page - 3;\r\n      for (let i = startPage; i < startPage + factor; i++) pages.push(<button key={i} onClick={this.setPage} className={this.state.page + 1 === i ? \"btn btn-success\" : \"btn btn-link\"}>{i}</button>);\r\n      //Si es la ultima pagina no muestra el boton de siguiente\r\n      if (this.state.page + 1 < this.state.maxCats / this.state.limit) {\r\n        pages.push(<button id=\"next\" key=\"next\" onClick={this.setPage} className=\"btn btn-info\">Siguiente</button>);\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  render() {\r\n    //Si esta cargando las categorias muestra un spinner\r\n    if (this.state.loading) {\r\n      return (\r\n        <div className=\"center-block\">\r\n          <span key=\"loading\" className=\"spinner-grow text-warning m-5\"></span>\r\n        </div>\r\n      );\r\n    } else {\r\n      //Si esta todo correcto mostrara los desplegables, el boton y la galeria\r\n      return (\r\n        <div>\r\n          <span>Categories</span>\r\n          <select id=\"categories\">\r\n            {this.state.categories.map(this.renderOption)}\r\n          </select>\r\n          <button onClick={this.searchCats} className=\"btn btn-primary\">Search</button>\r\n          <span>Limit</span>\r\n          <select id=\"limits\" onChange={this.setLimit}>\r\n            <option>5</option>\r\n            <option>10</option>\r\n            <option>20</option>\r\n          </select>\r\n          <Gallery cats={this.state.cats} />\r\n          <div className=\"pages d-flex justify-content-center\">\r\n            {this.renderPageButtons()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//URLs y maximo de gatos\r\nconst categoriesURL = 'https://my-json-server.typicode.com/JerryJHC/DBJsonServer/categories';\r\nconst catURL = 'https://api.thecatapi.com/v1/images/search?api_key=98d6679f-e35f-4cbc-8a91-85f3e93af700&limit=<limit>&page=<page>&order=Desc&category_ids=<category>';\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport Search from './Search'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Search />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}