{"version":3,"sources":["ajax.js","Image.js","Gallery.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["ajax","method","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","this","status","response","statusText","onerror","send","Image","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loaded","setState","loading","state","cat","props","view","push","react_default","a","createElement","key","id","className","src","alt","onLoad","Component","Gallery","src_Image","cats","map","renderImage","Search","setCategories","jsonString","categories","JSON","parse","_unused","console","log","setCats","_unused2","searchCats","asyncToGenerator","regenerator_default","mark","_callee","category","searchURL","wrap","_context","prev","next","document","getElementById","selectedOptions","value","currentCategory","page","currentLimit","limit","catURL","replace","then","catch","stop","setLimit","event","target","setPage","parseInt","innerText","categoriesURL","name","pages","length","onClick","startPage","i","maxCats","class","renderOption","onChange","src_Gallery","renderPageButtons","App","src_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9101abcf.chunk.js","sourcesContent":["function ajax(method,url) {\r\n\r\n    return new Promise(function (resolve, reject) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(method, url);\r\n        xhr.onload = function () {\r\n            if (this.status >= 200 && this.status < 300) {\r\n                resolve(xhr.response);\r\n            } else {\r\n                reject({\r\n                    status: this.status,\r\n                    statusText: xhr.statusText\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            reject({\r\n                status: this.status,\r\n                statusText: xhr.statusText\r\n            });\r\n        };\r\n        xhr.send();\r\n    });\r\n}\r\n\r\nexport default ajax;","import React, { Component } from 'react'\r\n\r\nclass Image extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: true\r\n        };\r\n    }\r\n\r\n    //Si la imagen se ha cargado marca el estado\r\n    loaded = () => {\r\n        this.setState({ loading: false });\r\n    }\r\n\r\n    //Genera la vista de la imagen y el span si esta cargando la imagen\r\n    render() {\r\n        let cat = this.props.cat;\r\n        let view = [];\r\n        if (this.state.loading) {\r\n            view.push(<span key={\"span_\" + cat.id} className=\"spinner-border text-warning\"></span>);\r\n        }\r\n        view.push(<img key={cat.id} src={cat.url} alt={cat.id} onLoad={this.loaded} />);\r\n        return view;\r\n    }\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react'\r\nimport Image from './Image'\r\n\r\nclass Gallery extends Component {\r\n\r\n    //Genera la imagen correspondiente\r\n    renderImage(cat) {\r\n        return (\r\n            <div key={cat.id} className=\"imageContainer d-flex justify-content-around align-content-between \">\r\n                <Image cat={cat} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //Genera una galeria con cada imagen de la coleccion\r\n    render() {\r\n        return (\r\n            <div className=\"gallery d-flex justify-content-around flex-wrap\">\r\n                {this.props.cats.map(this.renderImage)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gallery;","import React, { Component } from 'react'\r\nimport ajax from './ajax'\r\nimport Gallery from './Gallery'\r\n\r\nclass Search extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      categories: [],\r\n      cats: [],\r\n      limit: 5,\r\n      page: 0,\r\n      currentLimit: 5,\r\n      currentCategory: 0,\r\n      loading: true\r\n    }\r\n    //Hace la peticion al servidor en busca de las categorias\r\n    ajax('GET', categoriesURL).then(this.setCategories).catch(() => console.log(\"Error : AJAX CATEGORIES\"));\r\n  }\r\n\r\n  //recibe el JSON de categorias y coloca loading a false para mostrar el buscador\r\n  setCategories = (jsonString) => {\r\n    try {\r\n      this.setState({ categories: JSON.parse(jsonString), loading: false });\r\n    } catch{\r\n      console.log(\"Error: Parse JSON\");\r\n    }\r\n  }\r\n\r\n  //recibe el JSON con los gatos de la API y genera la coleccion\r\n  setCats = (jsonString) => {\r\n    try {\r\n      this.setState({ cats: JSON.parse(jsonString) });\r\n    } catch{\r\n      console.log(\"Error: Parse JSON\");\r\n    }\r\n  }\r\n\r\n  //Realiza la busqueda de la categoria y con el limite seleccionado\r\n  searchCats = async () => {\r\n    let category = document.getElementById(\"categories\").selectedOptions[0].value;\r\n    //Si la catergoria es diferente a la anterior busqueda utiliza la pagina 0\r\n    if (this.state.currentCategory !== category) {\r\n      await this.setState({ currentCategory: category, page: 0 });\r\n    }\r\n    //Si el limite es distinto al de la anterior busqueda utiliza la pagina 0\r\n    if (this.state.currentLimit !== this.state.limit) {\r\n      await this.setState({ currentLimit: this.state.limit, page: 0 });\r\n    }\r\n    //Genera la uri y realiza la peticion de imagenes\r\n    let searchURL = catURL.replace('<limit>', this.state.limit).replace('<page>', this.state.page).replace('<category>', category);\r\n    ajax('GET', searchURL).then(this.setCats).catch(() => console.log(\"Error : AJAX CATS\"));\r\n  }\r\n\r\n  //Genera el option de cada categoria\r\n  renderOption(category) {\r\n    return (\r\n      <option key={category.id} value={category.id}>{category.name}</option>\r\n    );\r\n  }\r\n\r\n  //Selecciona el limite nuevo de imagenes\r\n  setLimit = (event) => {\r\n    this.setState({ limit: event.target.selectedOptions[0].value });\r\n  }\r\n\r\n  //Asigna la pagina a utilizar y realiza una nueva busqueda\r\n  setPage = (event) => {\r\n    let page = this.state.page;\r\n    if (event.target.id === 'next') {\r\n      page++;\r\n    } else if (event.target.id === 'prev') {\r\n      page = page > 0 ? page - 1 : page;\r\n    } else {\r\n      page = parseInt(event.target.innerText) - 1;\r\n    }\r\n    this.setState({ page: page }, this.searchCats);\r\n  }\r\n\r\n  //Genera los botones  de las paginas, anterior y siguiente\r\n  renderPageButtons() {\r\n    let pages = [];\r\n    if (this.state.cats.length > 0 || this.state.page > 0) {\r\n      //Si es la primera pagina no muestra el boton de anterior\r\n      if (this.state.page > 0) {\r\n        pages.push(<button id=\"prev\" key=\"prev\" onClick={this.setPage} className=\"btn btn-info\">Anterior</button>);\r\n      }\r\n      let startPage = this.state.page < 5 ? 1 : this.state.page - 3;\r\n      for (let i = startPage; i < startPage + 5; i++) pages.push(<button key={i} onClick={this.setPage} className={this.state.page + 1 === i ? \"btn btn-success\" : \"btn btn-link\"}>{i}</button>);\r\n      //Si es la ultima pagina no muestra el boton de siguiente\r\n      if (this.state.page + 1 < maxCats / this.state.limit) {\r\n        pages.push(<button id=\"next\" key=\"next\" onClick={this.setPage} className=\"btn btn-info\">Siguiente</button>);\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  render() {\r\n    //Si esta cargando las categorias muestra un spinner\r\n    if (this.state.loading) {\r\n      return (\r\n        <div class=\"center-block\">\r\n          <span key=\"loading\" className=\"spinner-grow text-warning m-5\"></span>\r\n        </div>\r\n      );\r\n    } else {\r\n      //Si esta todo correcto mostrara los desplegables, el boton y la galeria\r\n      return (\r\n        <div>\r\n          <span>Categories</span>\r\n          <select id=\"categories\">\r\n            {this.state.categories.map(this.renderOption)}\r\n          </select>\r\n          <button onClick={this.searchCats} className=\"btn btn-primary\">Search</button>\r\n          <span>Limit</span>\r\n          <select id=\"limits\" onChange={this.setLimit}>\r\n            <option>5</option>\r\n            <option>10</option>\r\n            <option>20</option>\r\n          </select>\r\n          <Gallery cats={this.state.cats} />\r\n          <div className=\"pages d-flex justify-content-center\">\r\n            {this.renderPageButtons()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//URLs y maximo de gatos\r\nconst categoriesURL = 'https://my-json-server.typicode.com/JerryJHC/DBJsonServer/categories';\r\nconst catURL = 'https://api.thecatapi.com/v1/images/search?api_key=98d6679f-e35f-4cbc-8a91-85f3e93af700&limit=<limit>&page=<page>&order=Desc&category_ids=<category>';\r\nconst maxCats = 100;\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport Search from './Search'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Search />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}